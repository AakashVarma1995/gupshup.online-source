{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","createUseStyles","root","width","margin","chatWindow","height","boxShadow","overflowY","scrollSnapAlign","myChatMesageRow","display","justifyContent","myChatMessageBox","background","padding","color","borderRadius","minWidth","textAlign","chatMesageRow","chatMessageBox","sendBtn","border","fontWeight","marginLeft","input","actionsBar","marginTop","userNameShow","fontSize","paddingBottom","userName","window","location","pathname","replace","socket","io","connect","query","user","App","classes","React","useState","sender","message","messages","setMessages","sendMessageInput","setSendMessageInput","messagesEndRef","useRef","useEffect","on","allMessages","chatMessage","console","log","concat","off","current","scrollIntoView","behavior","className","map","msg","index","key","ref","onSubmit","e","preventDefault","emit","sendMessage","type","placeholder","onChange","target","value","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.776346ee.chunk.js","sourcesContent":["import React, { useRef } from 'react';\nimport io from 'socket.io-client';\nimport {createUseStyles} from 'react-jss'\n\nconst useStyles = createUseStyles({\n  root:{\n    width:'90%',\n    margin:'0 auto'\n  },\n  chatWindow:{\n    height:'500px',\n    boxShadow:'2px 2px 7px #aaaaaa inset',\n    overflowY:'scroll',\n    scrollSnapAlign:'end'\n  },\n  myChatMesageRow:{\n    width:'100%',\n    display:'flex',\n    justifyContent:'flex-end'\n  },\n  myChatMessageBox:{\n    margin:'8px',\n    background:'dodgerblue',\n    padding:'10px',\n    color:'white',\n    borderRadius:'10px',\n    minWidth:'50px',\n    textAlign:'right'\n\n  },\n  chatMesageRow:{\n\n    width:'100%',\n    display:'flex',\n\n  },\n  chatMessageBox:{\n    margin:'10px',\n    background:'#F93D66',\n    padding:'8px',\n    color:'white',\n    borderRadius:'10px',\n    minWidth:'50px',\n  },\n  sendBtn:{\n    border:'none',\n    background:\"dodgerblue\",\n    color:'white',\n    fontWeight:'bold',\n    padding:'12px',\n    marginLeft:'8px'\n    \n  },\n  input:{\n    border:'none',\n    background:'#f5f5f5',\n    padding:'12px',\n    width:'calc(100% - 90px)'\n  },\n  actionsBar:{\n    marginTop:'8px',\n    width:\"100%\"\n  },\n  userNameShow:{\n    fontSize:'0.7em',\n    paddingBottom:'5px'\n  }\n})\nconst userName = window.location.pathname.replace('/',\"\")\nconst socket = io.connect('socket-chat-app-backend.herokuapp.com',{query:{user:userName}})\n\n\nfunction App() {\n  const classes = useStyles()\n  const [messages, setMessages] = React.useState([{sender:userName, message:'Joined!'}])\n  const [sendMessageInput, setSendMessageInput] = React.useState('')\n  const messagesEndRef = useRef(null)\n\n  \n  React.useEffect(() => {\n\n\n    socket.on(\"onConnect\",allMessages=>{\n      setMessages(allMessages)\n    })\n\n    socket.on(\"chatMessage\",chatMessage=>{\n      console.log(chatMessage)\n      setMessages(messages=>messages.concat(chatMessage))\n      console.log(messages)\n     \n    })\n    return()=>{\n      socket.off()\n    }\n  }, [])\n\n  const scrollToBottom = () => {\n    messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" })\n  }\n\n  React.useEffect(scrollToBottom, [messages]);\n\n\n \n\n  const sendMessage =(e)=>{\n    e.preventDefault()\n    if(sendMessageInput==''){\n\n    }\n    else{\n      socket.emit(\"chatMessage\",{sender:userName, message:sendMessageInput})\n      setSendMessageInput(\"\")\n    }\n  }\n\n  return (\n   <div className={classes.root}>\n      <center><h1>GupShup.online<br/>Hi, {userName}</h1></center>\n      <div className={classes.chatWindow}>\n          {\n            messages.map((msg,index)=>{\n              if(msg.sender==userName){\n                return(<div className={classes.myChatMesageRow} key={index}>\n                  <div className={classes.myChatMessageBox}>\n                  <div className={classes.userNameShow}>Me</div>\n    \n                  {msg.message}\n                  </div>\n           \n              </div>)\n              }\n              else{\n                return(\n                  <div className={classes.chatMesageRow} key={index}>\n                  <div className={classes.chatMessageBox}>\n                <div className={classes.userNameShow}>{msg.sender}</div>\n    \n                  {msg.message}\n                  </div>\n              </div>\n                )\n              }\n            })\n          }\n          \n       <div ref={messagesEndRef}/>\n      </div>\n      <div className={classes.actionsBar}>\n        <form onSubmit={(e)=>sendMessage(e)}>\n        <input type='text' placeholder=\"Enter a message\" className={classes.input} onChange={(e)=>setSendMessageInput(e.target.value)} value={sendMessageInput}></input>\n        <button className={classes.sendBtn} type=\"submit\">Send</button>\n        </form>\n      \n      </div>\n   </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}